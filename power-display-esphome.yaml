esphome:
  name: "power-display-esphome"
# Enable the preferences library
  libraries:
    - Preferences

  includes:
    - power_display.h  

# Save values before shutting down
  on_shutdown:
    then:
      lambda: |-
        SaveValuesToNVM ();
        return;

esp32:
  board: esp32dev
  framework:
    type: arduino


# Enable logging
logger:
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 60s

time:
  - platform: homeassistant
    id: homeassistant_time

font: 
  # gfonts://family[@weight]
  - file: "gfonts://Mukta@700"
    id: large_text
    size: 38
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/']    

  # gfonts://family[@weight]
  - file: "gfonts://Roboto@400"
    id: energy_text
    size: 18

  # gfonts://family[@weight]
  - file: "gfonts://Roboto@400"
    id: price_text
    size: 22

  # gfonts://family[@weight]
  - file: "gfonts://Source+Sans+Pro@400"
    id: small_text
    size: 10

color:
  - id: my_grey
    red: 30%
    green: 30%
    blue: 30%
    white: 50%

  # #800000
  # 128,0,0
  - id: COLOR_CSS_MAROON
    red:   0.5020
    green: 0.0000
    blue:  0.0000
    white: 0.0000

  # #ff0000
  # 255,0,0
  - id: COLOR_CSS_RED
    red:   1.0000
    green: 0.0000
    blue:  0.0000
    white: 0.0000

  # #ffa500
  # 255,165,0
  - id: COLOR_CSS_ORANGE
    red:   1.0000
    green: 0.6471
    blue:  0.0000
    white: 0.0000


  # #adff2f
  # 173,255,47
  - id: COLOR_CSS_GREENYELLOW
    red:   0.6784
    green: 1.0000
    blue:  0.1843
    white: 0.0000

  # #008000
  # 0,128,0
  - id: COLOR_CSS_GREEN
    red:   0.0000
    green: 0.5020
    blue:  0.0000
    white: 0.0000

  # #006400
  # 0,100,0
  - id: COLOR_CSS_DARKGREEN
    red:   0.0000
    green: 0.3922
    blue:  0.0000
    white: 0.0000

  # #f5f5f5
  # 245,245,245
  - id: COLOR_CSS_WHITESMOKE
    red:   0.9608
    green: 0.9608
    blue:  0.9608
    white: 0.0000

# "Icons made by Freepik from www.flaticon.com"
image:
  - file: "solar_energy32.png"
    id: solar_power
    type: RGB
    #resize: 32x32
  - file: "electrical_tower32.png"
    id: grid_power
    type: RGB
    #resize: 32x32

# Define sensors in HomeAssistant that we use for display
sensor:
  # Current import (unit is W - if you meter is using kW then it needs conversion)
  - platform: homeassistant
    id: import_el
    entity_id: sensor.smart_gateways_smart_meter_power_consumed

  # Current export (if having solar production or similar, otherwise comment this out)    
  #- platform: homeassistant
  #  id: export_el
  #  entity_id: sensor.momentary_active_export

  # Electricity prices from NordPool. Expecting Home Assistant NordPool Integration. https://github.com/custom-components/nordpool
  - platform: homeassistant
    id: nordpool_max  
    entity_id: sensor.nordpool_kwh_se3_sek_3_10_025
    attribute: max

  # // From NordPool, but you can also use Tibber etc.
  - platform: homeassistant
    id: price_now
    entity_id: sensor.nordpool_kwh_se3_sek_3_10_025

  # Utility meter template in HomeAssistant. See example below (goes into configuration.yaml in HA.)  
  - platform: homeassistant
    id: consumption_today
    entity_id: sensor.smart_gateways_smart_meter_total_watt_delivered

  # Example:
  # utility_meter:
  # produktion_huset_per_dag:
  #   source: sensor.cumulative_active_export
  #   cycle: daily
  

text_sensor:
  - platform: homeassistant   # Nordpool
    id: nordpool_today
    entity_id: sensor.nordpool_kwh_se3_sek_3_10_025
    attribute: today
  - platform: homeassistant   # Nordpool
    id: nordpool_tomorrow
    entity_id: sensor.nordpool_kwh_se3_sek_3_10_025
    attribute: tomorrow

# GPIO for EPS32 2432S028R
spi:
  clk_pin: 14 #SCL
  mosi_pin: 13 #SDA
  miso_pin: 12

# Define a PWM output, GPIO for EPS32 2432S028R
output:
  - platform: ledc
    pin: 21
    id: gpio_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_backlight_pwm
    name: "Power Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON
    
# GPIO for EPS32 2432S028R
display:
  - platform: ili9xxx
    model: TFT 2.4
    cs_pin: 15
    dc_pin: 2
    #reset_pin: 4
    rotation: 180
    update_interval: 10s
    invert_colors: false
    color_palette: 8BIT


    lambda: |-

     static PowerDisplay powerDisplay;  
  
     // Unit is W - if your meter is reporting kW then it needs conversion (multiply value by 1000)
     // powerDisplay.SetCurrentPower((id(import_el).state - id(export_el).state));  // Use if using solar production
     powerDisplay.SetCurrentPower(id(import_el).state * 1000);  // Use if not using any solar production

     powerDisplay.SetCurrentPrice(id(price_now).state);
     powerDisplay.SetTodayMaxPrice(id(nordpool_max).state);
     powerDisplay.SetTodaysPrices(id(nordpool_today).state.c_str());
     powerDisplay.SetTomorrowsPrices(id(nordpool_tomorrow).state.c_str());
     powerDisplay.WriteDailyEnergy(id(consumption_today).state / 1000);
     powerDisplay.DisplayIcons(&it, 10, 10);
     powerDisplay.WritePowerText(&it, 120, 40);
     powerDisplay.WriteDailyAmount(&it, 120, 75, id(COLOR_CSS_WHITESMOKE));
     powerDisplay.CreateGraph(&it, 15, 95, 220, 120, my_grey);
     powerDisplay.SetGraphScale(0, 96, 0);
     powerDisplay.SetGraphGrid(&it, 0, 2, 0, 1, my_grey);
     powerDisplay.WriteTimeLine(&it, id(homeassistant_time).now().hour, id(homeassistant_time).now().minute, id(COLOR_CSS_WHITESMOKE));
     powerDisplay.SetPrices("today");
     powerDisplay.SetPrices("tomorrow");
     powerDisplay.DrawPriceGraph(&it);
     powerDisplay.WritePriceText(&it, 120, 297);

# Save global values every 1 minute. This is to quickly resume from a reboot and retain calculated values.
interval:
  - interval: 60s
    then:
      - lambda: |-
          SaveValuesToNVM();
    
captive_portal:
    
